/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void portList_click(GDropList source, GEvent event) { //_CODE_:portList:640344:
  //println("portList - GDropList >> GEvent." + event + " @ " + millis());
  selectedPort = portList.getSelectedText();
  startSerial();
} //_CODE_:portList:640344:

public void record_click(GButton source, GEvent event) { //_CODE_:record:731936:
  //println("record - GButton >> GEvent." + event + " @ " + millis());
  ////////////////////////////////////////////////////////////////////////////////
  //
  //    Enable the buttons and calls the serial port function
  //    Comselect is made true to call the serial function
  //  
  ///////////////////////////////////////////////////////////////////////////////
  try
  {
    jFileChooser = new JFileChooser();
    jFileChooser.setSelectedFile(new File("log.csv"));
    jFileChooser.showSaveDialog(null);
    String filePath = jFileChooser.getSelectedFile()+"";

    if ((filePath.equals("log.txt"))||(filePath.equals("null")))
    {
    } else
    {    
 //     done.setVisible(true);
      record.setVisible(false);
      close.setEnabled(false);
      close.setLocalColorScheme(GCScheme.CYAN_SCHEME);
      logging = true;
      date = new Date();
      output = new FileWriter(jFileChooser.getSelectedFile(), true);
      bufferedWriter = new BufferedWriter(output);
      bufferedWriter.write(date.toString()+"");
      bufferedWriter.newLine();
      bufferedWriter.write("TimeStramp,ECG,SpO2,Respiration");
      bufferedWriter.newLine();
    }
  }
  catch(Exception e)
  {
    println("File Not Found");
  }
} //_CODE_:record:731936:

public void close_click(GButton source, GEvent event) { //_CODE_:close:222350:
  //println("close - GButton >> GEvent." + event + " @ " + millis());
  int dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to Close The Application?");
  if (dialogResult == JOptionPane.YES_OPTION) {
    try
    {
      //Runtime runtime = Runtime.getRuntime();
      //Process proc = runtime.exec("sudo shutdown -h now");
      System.exit(0);
    }
    catch(Exception e)
    {
      exit();
    }
  } else
  {
  }
} //_CODE_:close:222350:

public void imgButton1_click1(GImageButton source, GEvent event) { //_CODE_:imgButton1:665258:
  println("imgButton1 - GImageButton >> GEvent." + event + " @ " + millis());
} //_CODE_:imgButton1:665258:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Healthy Pi");
  portList = new GDropList(this, 5, 7, 200, 385, 10);
  portList.setItems(loadStrings("list_640344"), 0);
  portList.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  portList.addEventHandler(this, "portList_click");
  record = new GButton(this, 319, 7, 100, 40);
  record.setText("RECORD");
  record.setTextBold();
  record.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  record.addEventHandler(this, "record_click");
  close = new GButton(this, 434, 7, 100, 40);
  close.setText("CLOSE");
  close.setTextBold();
  close.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  close.addEventHandler(this, "close_click");
  imgButton1 = new GImageButton(this, (width-500), 5, 473, 70, new String[] { "logo.png", "logo.png", "logo.png" } );
  imgButton1.addEventHandler(this, "imgButton1_click1");
  bpm1 = new GLabel(this, (width-250), 60, 250, 80);
  bpm1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  bpm1.setText("---");
  bpm1.setTextBold();
  bpm1.setOpaque(false);
  SP02 = new GLabel(this, (width-250), (height/3)+10, 250, 80);
  SP02.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  SP02.setText("---");
  SP02.setTextBold();
  SP02.setOpaque(false);
  BP = new GLabel(this, (width-250), (height-200), 225, 100);
  BP.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  BP.setText("BP: ---/---");
  BP.setTextBold();
  BP.setOpaque(false);
  Temp = new GLabel(this, (width-250), (height-100), 250, 58);
  Temp.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  Temp.setText("Temperature: ---");
  Temp.setTextBold();
  Temp.setOpaque(false);
  rpm = new GLabel(this, (width-250), (height/3)+(height/3)+10, 250, 62);
  rpm.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  rpm.setText("---");
  rpm.setTextBold();
  rpm.setOpaque(false);
}

// Variable declarations 
// autogenerated do not edit
GDropList portList; 
GButton record; 
GButton close; 
GImageButton imgButton1; 
GLabel bpm1; 
GLabel SP02; 
GLabel BP; 
GLabel label1; 
GLabel label4; 
GLabel Temp; 
GLabel label5; 
GLabel label7; 
GLabel label8; 
GLabel rpm; 
GLabel label11; 